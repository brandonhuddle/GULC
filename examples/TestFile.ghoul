// TODO: We need to validate the below works correctly
//struct Example<T: vec3> {}
//
//const var test: Example<vec3i>
//
//struct vec3 {}
//struct vec3i: vec3 {}

trait Addable {

}

struct vec3i: Addable {
    var x: i32
    var y: i32
    var z: i32
}

struct TemplateTest<T>: Addable {
    var member: T

    init() {

    }
}

// Template specialization
struct TemplateTest<T: vec3i>: Addable {
    var member: T

    init() {

    }
}

struct TemplateTest<T: i32>: Addable {
    var member: T

    init() {

    }
}

func main() -> i32 {
    let templateTest = TemplateTest<i32>()
    let templateTestFloat = TemplateTest<f32>()

    templateTest.member = 2

    if vec3i has trait Addable {
        templateTestFloat.member = 12.0
        templateTest.member = 32
    }

    return templateTest.member
}
