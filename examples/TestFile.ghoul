enum TestEnum {
    case Val1 = 23
    case Val2 = 4
    case Val = 5454

    func toString() {

    }
}

@copy
struct vec3 {
    var x: i32
    var y: i32
    var z: i32

    prop X: i32 {
        get {
            return x
        }
        get ref {
            return ref x
        }
        set {
            x = value
        }
    }

    prop Y: i32 {
        get {
            return y
        }
        get ref {
            return ref y
        }
        set {
            y = value
        }
    }

    prop Z: i32 {
        get {
            return z
        }
        get ref {
            return ref z
        }
        set {
            z = value
        }
    }

    init() {
        self.x = 0
        self.y = 0
        self.z = 0
    }

    init copy(_ other: ref Self) {
        self.x = other.x
        self.y = other.y
        self.z = other.z
    }

    init move(_ other: ref mut Self) {
        self.x = other.x
        self.y = other.y
        self.z = other.z

        // These are unneeded but I'm including them just for filler
        other.x = 0
        other.y = 0
        other.z = 0
    }

    init(x: i32, y: i32, z: i32) {
        self.x = x
        self.y = y
        self.z = z
    }

    subscript(_ index: i32) -> i32 {
        get {
            if index == 0 {
                return x
            } else if index == 1 {
                return y
            } else if index == 2 {
                return z
            }

            return -1
        }
        set {
            if index == 0 {
                x = value
            } else if index == 1 {
                y = value
            } else if index == 2 {
                z = value
            }
        }
    }
}

//struct TemplateTest<T> {
//    init() {
//
//    }
//}

func manglerTest(arg param: ref i32) -> i32 {
    return param
}

//func boolTest() -> bool {
//    return true
//}

func main() -> i32 {
    let mut testVec = vec3(x: 0, y: 12, z: 44)
//    let templateTest = TemplateTest<i32>()
//    let testFloat: f32 = 12.0
    let testInt: ref i32 = ref testVec.Y

    let testRefParam = manglerTest(arg: testInt)
    let subscriptTest = testVec[0]

    testVec.Z = 70

    if testInt == testRefParam {
        return subscriptTest
    } else {
        return 90
    }
}
