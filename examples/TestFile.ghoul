@copy
struct vec3 {
    var x: i32
    var y: i32
    var z: i32

    init() {
        self.x = 0
        self.y = 0
        self.z = 0
    }

    init copy(_ other: ref Self) {
        self.x = other.x
        self.y = other.y
        self.z = other.z
    }

    init move(_ other: ref mut Self) {
        self.x = other.x
        self.y = other.y
        self.z = other.z

        // These are unneeded but I'm including them just for filler
        other.x = 0
        other.y = 0
        other.z = 0
    }

    init(x: i32, y: i32, z: i32) {
        self.x = x
        self.y = y
        self.z = z
    }

    operator infix +(right: in vec3) -> vec3 {
        return vec3(
            x: self.x + right.x,
            y: self.y + right.y,
            z: self.z + right.z
        )
    }

    // Yes I know this is wrong.
    operator prefix ++() -> vec3 {
        return vec3(
            x: self.x + 1,
            y: self.y + 1,
            z: self.z + 1
        )
    }

    func memberFuncTest() -> i32 {
        return 128
    }
}

//struct TemplateTest<T> {
//    init() {
//
//    }
//}

func main() -> i32 {
    let left = vec3(x: 4, y: 8, z: 16)
    let right = vec3(x: 16, y: 8, z: 4)
    let result = ++left

    return result.x
}
