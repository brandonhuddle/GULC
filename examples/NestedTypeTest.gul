/**
 * This file contains multiple, niche scenarios that need to be properly supported when it comes to nested types,
 * dependent types, and templates
 */

struct Example {

}

struct SeparateDependent<G> {
    struct NestedDependence {

    }
}

struct Example<T> {
    struct Dependent<G> {
        struct NestedDependence {

        }
    }

    func dependenceTest() -> Dependent<T> {

    }

    func nestedDependenceTest() -> Dependent<T>.NestedDependence {

    }

    func separateDependenceTest() -> SeparateDependent<T> {

    }

    func separateNestedDependenceTest() -> SeparateDependent<T>.NestedDependence {

    }

    struct NestedExample<G> {
        struct DeepNestedType {
            var member1: T;
            var member2: G;
        }

        func typeResolveTest() -> DeepNestedType {

        }

        struct DeepNestedTemplateType<M> {
            struct SuperDeepDependentType {

            }
        }

        func dependenceTest() -> DeepNestedTemplateType<G>.SuperDeepDependentType {

        }
    }

    struct TestStruct {
        struct DeepNestedTemplate<G> {
            struct SuperDeepNestedType {
                var member1: T;
                var member2: G;
            }

            func funTypeResolveTest() -> SuperDeepNestedType {

            }
        }

        func templateTypeResolveTest() -> DeepNestedTemplate<i32> {

        }
    }
}

// Basic extension...
extension Example {

}

// Template extension to apply to everything...
extension<T> T {

}

// Extension that applies to a type named `Example` with it's own template arguments
extension<T> Example<T> {

}

// Extension that applies to any pointers to the type `Example`
extension *Example {

}

func worstTest() -> Example<i32>.TestStruct.DeepNestedTemplate<i64>.SuperDeepNestedType {

}

func _start() -> Example<i32>.NestedExample<i8>.DeepNestedType {

}
