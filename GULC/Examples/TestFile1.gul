struct vec2i
{
    public int x;
    public int y;

    private vec2i()
    {
        x = 0;
        y = 0;
    }

    public vec2i(int x, int y)
    {
        this.x = x;
        this.y = y;
    }

    public vec2i operator infix add(vec2i const& rightValue)
    {
        return vec2i(x + rightValue.x, y + rightValue.y);
    }

    public vec2i operator prefix abs()
    {
        int resultX = x;
        int resultY = y;

        if (resultX < 0)
        {
            resultX = -resultX;
        }

        if (resultY < 0)
        {
            resultY = -resultY;
        }

        return vec2i(resultX, resultY);
    }

    public vec2i operator prefix +()
    {
        return abs! this;
    }

    public vec2i operator postfix --()
    {
        int oldX = x;
        int oldY = y;

        x -= 1;
        y -= 1;

        return vec2i(oldX, oldY);
    }
}

struct vec3i
{
    public int x;
    public int y;
    public int z;

    public vec3i()
    {
        x = 0;
        y = 0;
        z = 0;
    }

    public vec3i(int x, int y, int z)
    {
        this.x = x;
        this.y = y;
        this.z = z;
    }

    public explicit operator vec2i()
    {
        return vec2i(x, y);
    }

    public int operator this[int x]
    {
        return x;
    }

    public int operator this(int x, int y, int z)
    {
        return x + y + z;
    }
}

int main()
{
    vec3i test3d(12, 12, 12);
    vec2i test = (vec2i)test3d;
    vec2i hmm = test add~ test;

    hmm--;

    return test3d(hmm.x, 3, 2);
}
